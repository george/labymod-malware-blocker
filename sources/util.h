#pragma once

#include <windows.h>
#include <scesvc.h>
#include <vector>
#include <string>
#include <iostream>
#include <fstream>

const std::string hosts_path = R"(C:\Windows\System32\drivers\etc\hosts)";

const std::vector<std::string> blocked_sites = {
        "labymod-addons.net", // The site hosting the malware JARs

        /*
         * The sites the malware connects to in order to download its additional
         * payload, or communicate with its corresponding server
         */
        "first.throwable.in",
        "files.throwable.in",
        "t23e7v6uz8idz87ehugwq.skyrage.de"
};

bool checkElevated() {
    HANDLE hToken = nullptr;
    TOKEN_ELEVATION elevation;
    DWORD dwSize;

    if (OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &hToken) && GetTokenInformation(
            hToken, TokenElevation, &elevation, sizeof(elevation), &dwSize)) {
        return elevation.TokenIsElevated;
    }

    if (!hToken) {
        CloseHandle(hToken);
        hToken = nullptr;
    }

    return false;
}

bool checkHostsFileExists() {
    std::ifstream stream = std::ifstream(hosts_path.c_str());
    return stream.good();
}

void createHostsFile() {
    std::ofstream stream = std::ofstream(hosts_path.c_str());
    stream.close();
}

int writeToHostsFile(const std::vector<std::string> &lines) {
    std::ofstream stream = std::ofstream(hosts_path.c_str(), std::ios::app);

    if (!stream) {
        return -1;
    }

    for (const auto &line : lines) {
        stream << "\n127.0.0.1 " << line;
    }

    stream.close();
    return 0;
}

std::vector<std::string> getNotInHostsFile() {
    std::ifstream stream = std::ifstream(hosts_path.c_str());

    /*
     * Not the best way of doing it, but it works
     */
    std::vector<std::string> entries = {};
    std::vector<std::string> alreadyInHostsFile = {};
    std::vector<std::string> toAdd = {};

    std::string currentLine = {};

    while (std::getline(stream, currentLine)) {
        entries.push_back(currentLine);
    }

    for (const auto &site : blocked_sites) {
        for (const auto &entry : entries) {
            if (entry.find(site) != std::string::npos) {
                alreadyInHostsFile.push_back(site);
            }
        }
    }

    for (const auto &entry : blocked_sites) {
        if (std::find(alreadyInHostsFile.begin(), alreadyInHostsFile.end(), entry) == std::end(alreadyInHostsFile)) {
            toAdd.push_back(entry);
        }
    }

    return toAdd;
}

void log(const std::string &channel, const std::string &message) {
    std::cout << "[" + channel + "] " + message << std::endl;
}
